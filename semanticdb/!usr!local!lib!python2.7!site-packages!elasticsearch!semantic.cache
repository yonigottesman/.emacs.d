;; Object elasticsearch/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "elasticsearch/"
  :tables
  (list
    (semanticdb-table "transport.py"
      :major-mode 'python-mode
      :tags 
        '( ("time" include nil nil [1 12])
            ("itertools" include nil nil [13 40])
            ("Urllib3HttpConnection" include nil nil [59 87])
            ("DummyConnectionPool" include nil nil [110 152])
            ("ConnectionPool" include nil nil [110 152])
            ("DEFAULT_SERIALIZERS" include nil nil [170 226])
            ("Deserializer" include nil nil [170 226])
            ("JSONSerializer" include nil nil [170 226])
            ("ImproperlyConfigured" include nil nil [244 369])
            ("ConnectionTimeout" include nil nil [244 369])
            ("SerializationError" include nil nil [244 369])
            ("TransportError" include nil nil [244 369])
            ("ConnectionError" include nil nil [244 369])
            ("get_host_info" function
               (:documentation "
    Simple callback that takes the node info from `/_cluster/nodes` and a
    parsed connection information and return the connection information. If
    `None` is returned this node will be skipped.

    Useful for filtering nodes (by proximity for example) or if additional
    information needs to be provided for the :class:`~elasticsearch.Connection`
    class. By default master only nodes are filtered out since they shouldn't
    typically be used for API operations.

    :arg node_info: node information from `/_cluster/nodes`
    :arg host: connection information (host, port) extracted from the node info
    "
                :arguments 
                  ( ("node_info" variable nil (reparse-symbol function_parameters) [390 399])
                    ("host" variable nil (reparse-symbol function_parameters) [401 405]))                  )
                nil [372 1302])
            ("Transport" type
               (:documentation "
    Encapsulation of transport-related to logic. Handles instantiation of the
    individual connections as well as creating a connection pool to hold them.

    Main interface is the `perform_request` method.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :arg hosts: list of dictionaries, each containing keyword arguments to
            create a `connection_class` instance
        :arg connection_class: subclass of :class:`~elasticsearch.Connection` to use
        :arg connection_pool_class: subclass of :class:`~elasticsearch.ConnectionPool` to use
        :arg host_info_callback: callback responsible for taking the node information from
            `/_cluser/nodes`, along with already extracted information, and
            producing a list of arguments (same as `hosts` parameter)
        :arg sniff_on_start: flag indicating whether to obtain a list of nodes
            from the cluser at startup time
        :arg sniffer_timeout: number of seconds between automatic sniffs
        :arg sniff_on_connection_fail: flag controlling if connection failure triggers a sniff
        :arg sniff_timeout: timeout used for the sniff request - it should be a
            fast api call and we are talking potentially to more nodes so we want
            to fail quickly. Not used during initial sniffing (if
            ``sniff_on_start`` is on) when the connection still isn't
            initialized.
        :arg serializer: serializer instance
        :arg serializers: optional dict of serializer instances that will be
            used for deserializing data coming from the server. (key is the mimetype)
        :arg default_mimetype: when no mimetype is specified by the server
            response assume this mimetype, defaults to `'application/json'`
        :arg max_retries: maximum number of retries before an exception is propagated
        :arg retry_on_status: set of HTTP status codes on which we should retry
            on a different node. defaults to ``(503, 504, )``
        :arg retry_on_timeout: should timeout trigger a retry on different
            node? (default `False`)
        :arg send_get_body_as: for GET requests with body this option allows
            you to specify an alternate way of execution for environments that
            don't support passing bodies with GET requests. If you set this to
            'POST' a POST method will be used instead, if to 'source' then the body
            will be serialized and passed as a query parameter `source`.

        Any extra keyword arguments will be passed to the `connection_class`
        when creating and instance unless overriden by that connection's
        options provided as part of the hosts parameter.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2026 4497])
                            ("_serializers" variable nil (reparse-symbol indented_block_body) [4538 4579])
                            ("_serializers" variable nil (reparse-symbol indented_block_body) [4669 4715])
                            ("if" code nil (reparse-symbol indented_block_body) [4809 4870])
                            ("self" variable nil (reparse-symbol indented_block_body) [4926 4990])
                            ("self" variable nil (reparse-symbol indented_block_body) [5000 5030])
                            ("self" variable nil (reparse-symbol indented_block_body) [5039 5079])
                            ("self" variable nil (reparse-symbol indented_block_body) [5088 5126])
                            ("self" variable nil (reparse-symbol indented_block_body) [5135 5175])
                            ("self" variable nil (reparse-symbol indented_block_body) [5211 5239])
                            ("self" variable nil (reparse-symbol indented_block_body) [5283 5333])
                            ("self" variable nil (reparse-symbol indented_block_body) [5342 5382])
                            ("self" variable nil (reparse-symbol indented_block_body) [5449 5469])
                            ("self" variable nil (reparse-symbol indented_block_body) [5478 5496])
                            ("self" code nil (reparse-symbol indented_block_body) [5540 5567])
                            ("self" variable nil (reparse-symbol indented_block_body) [5640 5699])
                            ("self" variable nil (reparse-symbol indented_block_body) [5733 5771])
                            ("self" variable nil (reparse-symbol indented_block_body) [5780 5836])
                            ("self" variable nil (reparse-symbol indented_block_body) [5845 5874])
                            ("self" variable nil (reparse-symbol indented_block_body) [5883 5917])
                            ("self" variable nil (reparse-symbol indented_block_body) [5998 6042])
                            ("if" code nil (reparse-symbol indented_block_body) [6052 6106]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1571 1575])
                            ("hosts" variable nil (reparse-symbol function_parameters) [1577 1582])
                            ("connection_class" variable nil (reparse-symbol function_parameters) [1584 1600])
                            ("connection_pool_class" variable nil (reparse-symbol function_parameters) [1632 1653])
                            ("host_info_callback" variable nil (reparse-symbol function_parameters) [1670 1688])
                            ("sniff_on_start" variable nil (reparse-symbol function_parameters) [1712 1726])
                            ("sniffer_timeout" variable nil (reparse-symbol function_parameters) [1734 1749])
                            ("sniff_timeout" variable nil (reparse-symbol function_parameters) [1756 1769])
                            ("sniff_on_connection_fail" variable nil (reparse-symbol function_parameters) [1782 1806])
                            ("serializer" variable nil (reparse-symbol function_parameters) [1814 1824])
                            ("serializers" variable nil (reparse-symbol function_parameters) [1843 1854])
                            ("default_mimetype" variable nil (reparse-symbol function_parameters) [1869 1885])
                            ("max_retries" variable nil (reparse-symbol function_parameters) [1906 1917])
                            ("retry_on_status" variable nil (reparse-symbol function_parameters) [1921 1936])
                            ("retry_on_timeout" variable nil (reparse-symbol function_parameters) [1959 1975])
                            ("send_get_body_as" variable nil (reparse-symbol function_parameters) [1983 1999])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2007 2015]))                          
                        :documentation "
        :arg hosts: list of dictionaries, each containing keyword arguments to
            create a `connection_class` instance
        :arg connection_class: subclass of :class:`~elasticsearch.Connection` to use
        :arg connection_pool_class: subclass of :class:`~elasticsearch.ConnectionPool` to use
        :arg host_info_callback: callback responsible for taking the node information from
            `/_cluser/nodes`, along with already extracted information, and
            producing a list of arguments (same as `hosts` parameter)
        :arg sniff_on_start: flag indicating whether to obtain a list of nodes
            from the cluser at startup time
        :arg sniffer_timeout: number of seconds between automatic sniffs
        :arg sniff_on_connection_fail: flag controlling if connection failure triggers a sniff
        :arg sniff_timeout: timeout used for the sniff request - it should be a
            fast api call and we are talking potentially to more nodes so we want
            to fail quickly. Not used during initial sniffing (if
            ``sniff_on_start`` is on) when the connection still isn't
            initialized.
        :arg serializer: serializer instance
        :arg serializers: optional dict of serializer instances that will be
            used for deserializing data coming from the server. (key is the mimetype)
        :arg default_mimetype: when no mimetype is specified by the server
            response assume this mimetype, defaults to `'application/json'`
        :arg max_retries: maximum number of retries before an exception is propagated
        :arg retry_on_status: set of HTTP status codes on which we should retry
            on a different node. defaults to ``(503, 504, )``
        :arg retry_on_timeout: should timeout trigger a retry on different
            node? (default `False`)
        :arg send_get_body_as: for GET requests with body this option allows
            you to specify an alternate way of execution for environments that
            don't support passing bodies with GET requests. If you set this to
            'POST' a POST method will be used instead, if to 'source' then the body
            will be serialized and passed as a query parameter `source`.

        Any extra keyword arguments will be passed to the `connection_class`
        when creating and instance unless overriden by that connection's
        options provided as part of the hosts parameter.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1558 6106])
                    ("add_connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6130 6134])
                            ("host" variable nil (reparse-symbol function_parameters) [6136 6140]))                          
                        :documentation "
        Create a new :class:`~elasticsearch.Connection` instance and add it to the pool.

        :arg host: kwargs that will be used to create the instance
        ")
                        (reparse-symbol indented_block_body) [6111 6397])
                    ("set_connections" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6422 6426])
                            ("hosts" variable nil (reparse-symbol function_parameters) [6428 6433]))                          
                        :documentation "
        Instantiate all the connections and crate new connection pool to hold
        them. Tries to identify unchanged hosts and re-use existing
        :class:`~elasticsearch.Connection` instances.

        :arg hosts: same as `__init__`
        ")
                        (reparse-symbol indented_block_body) [6402 8161])
                    ("get_connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8185 8189]))                          
                        :documentation "
        Retreive a :class:`~elasticsearch.Connection` instance from the
        :class:`~elasticsearch.ConnectionPool` instance.
        ")
                        (reparse-symbol indented_block_body) [8166 8536])
                    ("_get_sniff_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8561 8565])
                            ("initial" variable nil (reparse-symbol function_parameters) [8567 8574]))                          
                        :documentation "
        Perform the request to get sniffins information. Returns a list of
        dictionaries (one per node) containing all the information from the
        cluster.

        It also sets the last_sniff attribute in case of a successful attempt.

        In rare cases it might be possible to override this method in your
        custom Transport class to serve data from alternative source like
        configuration management.
        ")
                        (reparse-symbol indented_block_body) [8541 10128])
                    ("sniff_hosts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10150 10154])
                            ("initial" variable nil (reparse-symbol function_parameters) [10156 10163]))                          
                        :documentation "
        Obtain a list of nodes from the cluster and create a new connection
        pool using the information retrieved.

        To extract the node connection parameters use the ``nodes_to_host_callback``.

        :arg initial: flag indicating if this is during startup
            (``sniff_on_start``), ignore the ``sniff_timeout`` if ``True``
        ")
                        (reparse-symbol indented_block_body) [10134 11573])
                    ("mark_dead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11592 11596])
                            ("connection" variable nil (reparse-symbol function_parameters) [11598 11608]))                          
                        :documentation "
        Mark a connection as dead (failed) in the connection pool. If sniffing
        on failure is enabled this will initiate the sniffing process.

        :arg connection: instance of :class:`~elasticsearch.Connection` that failed
        ")
                        (reparse-symbol indented_block_body) [11578 12088])
                    ("perform_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12113 12117])
                            ("method" variable nil (reparse-symbol function_parameters) [12119 12125])
                            ("url" variable nil (reparse-symbol function_parameters) [12127 12130])
                            ("params" variable nil (reparse-symbol function_parameters) [12132 12138])
                            ("body" variable nil (reparse-symbol function_parameters) [12145 12149]))                          
                        :documentation "
        Perform the actual request. Retrieve a connection from the connection
        pool, pass all the information to it's perform_request method and
        return the data.

        If an exception was raised, mark the connection as failed and retry (up
        to `max_retries` times).

        If the operation was succesful and the connection used was previously
        marked as dead, mark it as live, resetting it's failure count.

        :arg method: HTTP method to use
        :arg url: absolute url (without host) to target
        :arg params: dictionary of query parameters, will be handed over to the
            underlying :class:`~elasticsearch.Connection` class for serialization
        :arg body: body of the request, will be serializes using serializer and
            passed to the connection
        ")
                        (reparse-symbol indented_block_body) [12093 15277]))                  
                :type "class")
                nil [1303 15277]))          
      :file "transport.py"
      :pointmax 15278
      :fsize 15277
      :lastmodtime '(22441 33351 0 0)
      :unmatched-syntax '((INDENT_BLOCK 15071 . 15277) (NEWLINE 15003 . 15004) (COLON 15002 . 15003) (ELSE 14998 . 15002) (INDENT_BLOCK 14358 . 14985) (NEWLINE 14357 . 14358) (COLON 14356 . 14357) (TRY 14186 . 14189) (AS 14352 . 14354) (FROM 227 . 231) (PERIOD 232 . 233) (FROM 153 . 157) (PERIOD 158 . 159) (FROM 88 . 92) (PERIOD 93 . 94) (FROM 42 . 46) (PERIOD 47 . 48))))
  :file "!usr!local!lib!python2.7!site-packages!elasticsearch!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
